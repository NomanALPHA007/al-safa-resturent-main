"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-request";
exports.ids = ["vendor-chunks/graphql-request"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultJsonSerializer = void 0;\nexports.defaultJsonSerializer = JSON;\n//# sourceMappingURL=defaultJsonSerializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZS1jYXJ0Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvZGVmYXVsdEpzb25TZXJpYWxpemVyLmpzP2U5OTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRKc29uU2VyaWFsaXplciA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdEpzb25TZXJpYWxpemVyID0gSlNPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRKc29uU2VyaWFsaXplci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/graphql-ws.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GraphQLWebSocketClient = void 0;\n/* eslint-disable */\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/types.js\");\n// import type WebSocket from 'ws'\nconst CONNECTION_INIT = `connection_init`;\nconst CONNECTION_ACK = `connection_ack`;\nconst PING = `ping`;\nconst PONG = `pong`;\nconst SUBSCRIBE = `subscribe`;\nconst NEXT = `next`;\nconst ERROR = `error`;\nconst COMPLETE = `complete`;\nclass GraphQLWebSocketMessage {\n    get type() {\n        return this._type;\n    }\n    get id() {\n        return this._id;\n    }\n    get payload() {\n        return this._payload;\n    }\n    constructor(type, payload, id) {\n        this._type = type;\n        this._payload = payload;\n        this._id = id;\n    }\n    get text() {\n        const result = { type: this.type };\n        if (this.id != null && this.id != undefined)\n            result.id = this.id;\n        if (this.payload != null && this.payload != undefined)\n            result.payload = this.payload;\n        return JSON.stringify(result);\n    }\n    static parse(data, f) {\n        const { type, payload, id } = JSON.parse(data);\n        return new GraphQLWebSocketMessage(type, f(payload), id);\n    }\n}\nclass GraphQLWebSocketClient {\n    constructor(socket, { onInit, onAcknowledged, onPing, onPong }) {\n        this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };\n        this.socket = socket;\n        socket.addEventListener(`open`, async (e) => {\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n            socket.send(ConnectionInit(onInit ? await onInit() : null).text);\n        });\n        socket.addEventListener(`close`, (e) => {\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n        });\n        socket.addEventListener(`error`, (e) => {\n            console.error(e);\n        });\n        socket.addEventListener(`message`, (e) => {\n            try {\n                const message = parseMessage(e.data);\n                switch (message.type) {\n                    case CONNECTION_ACK: {\n                        if (this.socketState.acknowledged) {\n                            console.warn(`Duplicate CONNECTION_ACK message ignored`);\n                        }\n                        else {\n                            this.socketState.acknowledged = true;\n                            if (onAcknowledged)\n                                onAcknowledged(message.payload);\n                        }\n                        return;\n                    }\n                    case PING: {\n                        if (onPing)\n                            onPing(message.payload).then((r) => socket.send(Pong(r).text));\n                        else\n                            socket.send(Pong(null).text);\n                        return;\n                    }\n                    case PONG: {\n                        if (onPong)\n                            onPong(message.payload);\n                        return;\n                    }\n                }\n                if (!this.socketState.acknowledged) {\n                    // Web-socket connection not acknowledged\n                    return;\n                }\n                if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n                    // No subscription identifer or subscription indentifier is not found\n                    return;\n                }\n                const { query, variables, subscriber } = this.socketState.subscriptions[message.id];\n                switch (message.type) {\n                    case NEXT: {\n                        if (!message.payload.errors && message.payload.data) {\n                            subscriber.next && subscriber.next(message.payload.data);\n                        }\n                        if (message.payload.errors) {\n                            subscriber.error &&\n                                subscriber.error(new types_js_1.ClientError({ ...message.payload, status: 200 }, { query, variables }));\n                        }\n                        else {\n                        }\n                        return;\n                    }\n                    case ERROR: {\n                        subscriber.error &&\n                            subscriber.error(new types_js_1.ClientError({ errors: message.payload, status: 200 }, { query, variables }));\n                        return;\n                    }\n                    case COMPLETE: {\n                        subscriber.complete && subscriber.complete();\n                        delete this.socketState.subscriptions[message.id];\n                        return;\n                    }\n                }\n            }\n            catch (e) {\n                // Unexpected errors while handling graphql-ws message\n                console.error(e);\n                socket.close(1006);\n            }\n            socket.close(4400, `Unknown graphql-ws message.`);\n        });\n    }\n    makeSubscribe(query, operationName, subscriber, variables) {\n        const subscriptionId = (this.socketState.lastRequestId++).toString();\n        this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };\n        this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);\n        return () => {\n            this.socket.send(Complete(subscriptionId).text);\n            delete this.socketState.subscriptions[subscriptionId];\n        };\n    }\n    rawRequest(query, variables) {\n        return new Promise((resolve, reject) => {\n            let result;\n            this.rawSubscribe(query, {\n                next: (data, extensions) => (result = { data, extensions }),\n                error: reject,\n                complete: () => resolve(result),\n            }, variables);\n        });\n    }\n    request(document, variables) {\n        return new Promise((resolve, reject) => {\n            let result;\n            this.subscribe(document, {\n                next: (data) => (result = data),\n                error: reject,\n                complete: () => resolve(result),\n            }, variables);\n        });\n    }\n    subscribe(document, subscriber, variables) {\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(document);\n        return this.makeSubscribe(query, operationName, subscriber, variables);\n    }\n    rawSubscribe(query, subscriber, variables) {\n        return this.makeSubscribe(query, undefined, subscriber, variables);\n    }\n    ping(payload) {\n        this.socket.send(Ping(payload).text);\n    }\n    close() {\n        this.socket.close(1000);\n    }\n}\nGraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;\nexports.GraphQLWebSocketClient = GraphQLWebSocketClient;\n// Helper functions\nfunction parseMessage(data, f = (a) => a) {\n    const m = GraphQLWebSocketMessage.parse(data, f);\n    return m;\n}\nfunction ConnectionInit(payload) {\n    return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);\n}\nfunction Ping(payload) {\n    return new GraphQLWebSocketMessage(PING, payload, undefined);\n}\nfunction Pong(payload) {\n    return new GraphQLWebSocketMessage(PONG, payload, undefined);\n}\nfunction Subscribe(id, payload) {\n    return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);\n}\nfunction Complete(id) {\n    return new GraphQLWebSocketMessage(COMPLETE, undefined, id);\n}\n//# sourceMappingURL=graphql-ws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HeadersInstanceToPlainObject = exports.uppercase = void 0;\nconst uppercase = (str) => str.toUpperCase();\nexports.uppercase = uppercase;\n/**\n * Convert Headers instance into regular object\n */\nconst HeadersInstanceToPlainObject = (headers) => {\n    const o = {};\n    headers.forEach((v, k) => {\n        o[k] = v;\n    });\n    return o;\n};\nexports.HeadersInstanceToPlainObject = HeadersInstanceToPlainObject;\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLGlCQUFpQjtBQUN4RDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZGllLWNhcnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzPzQyYmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSBleHBvcnRzLnVwcGVyY2FzZSA9IHZvaWQgMDtcbmNvbnN0IHVwcGVyY2FzZSA9IChzdHIpID0+IHN0ci50b1VwcGVyQ2FzZSgpO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG4vKipcbiAqIENvbnZlcnQgSGVhZGVycyBpbnN0YW5jZSBpbnRvIHJlZ3VsYXIgb2JqZWN0XG4gKi9cbmNvbnN0IEhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSAoaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IG8gPSB7fTtcbiAgICBoZWFkZXJzLmZvckVhY2goKHYsIGspID0+IHtcbiAgICAgICAgb1trXSA9IHY7XG4gICAgfSk7XG4gICAgcmV0dXJuIG87XG59O1xuZXhwb3J0cy5IZWFkZXJzSW5zdGFuY2VUb1BsYWluT2JqZWN0ID0gSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = exports.batchRequests = exports.resolveRequestDocument = exports.GraphQLWebSocketClient = exports.gql = void 0;\nconst defaultJsonSerializer_js_1 = __webpack_require__(/*! ./defaultJsonSerializer.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\");\nconst helpers_js_1 = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/helpers.js\");\nconst parseArgs_js_1 = __webpack_require__(/*! ./parseArgs.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js\");\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/types.js\");\nObject.defineProperty(exports, \"ClientError\", ({ enumerable: true, get: function () { return types_js_1.ClientError; } }));\nconst cross_fetch_1 = __importStar(__webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\")), CrossFetch = cross_fetch_1;\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers) => {\n    let oHeaders = {};\n    if (headers) {\n        if ((typeof Headers !== `undefined` && headers instanceof Headers) ||\n            (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)) {\n            oHeaders = (0, helpers_js_1.HeadersInstanceToPlainObject)(headers);\n        }\n        else if (Array.isArray(headers)) {\n            headers.forEach(([name, value]) => {\n                if (name && value !== undefined) {\n                    oHeaders[name] = value;\n                }\n            });\n        }\n        else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str) => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = (params) => {\n    if (!Array.isArray(params.query)) {\n        const params_ = params;\n        const search = [`query=${encodeURIComponent(cleanQuery(params_.query))}`];\n        if (params.variables) {\n            search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`);\n        }\n        if (params_.operationName) {\n            search.push(`operationName=${encodeURIComponent(params_.operationName)}`);\n        }\n        return search.join(`&`);\n    }\n    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n        throw new Error(`Cannot create query with given variable type, array expected`);\n    }\n    // Batch support\n    const params_ = params;\n    const payload = params.query.reduce((acc, currentQuery, index) => {\n        acc.push({\n            query: cleanQuery(currentQuery),\n            variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n        });\n        return acc;\n    }, []);\n    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;\n};\nconst createHttpMethodFetcher = (method) => async (params) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params;\n    const headers = { ...params.headers };\n    let queryParams = ``;\n    let body = undefined;\n    if (method === `POST`) {\n        body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);\n        if (typeof body === `string`) {\n            // @ts-expect-error todo\n            headers[`Content-Type`] = `application/json`;\n        }\n    }\n    else {\n        // @ts-expect-error todo needs ADT for TS to understand the different states\n        queryParams = buildRequestConfig({\n            query,\n            variables,\n            operationName,\n            jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer,\n        });\n    }\n    const init = {\n        method,\n        headers,\n        body,\n        ...fetchOptions,\n    };\n    let urlResolved = url;\n    let initResolved = init;\n    if (middleware) {\n        const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }));\n        const { url: urlNew, ...initNew } = result;\n        urlResolved = urlNew;\n        initResolved = initNew;\n    }\n    if (queryParams) {\n        urlResolved = `${urlResolved}?${queryParams}`;\n    }\n    return await fetch(urlResolved, initResolved);\n};\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n    constructor(url, requestConfig = {}) {\n        this.url = url;\n        this.requestConfig = requestConfig;\n        /**\n         * Send a GraphQL query to the server.\n         */\n        this.rawRequest = async (...args) => {\n            const [queryOrOptions, variables, requestHeaders] = args;\n            const rawRequestOptions = (0, parseArgs_js_1.parseRawRequestArgs)(queryOrOptions, variables, requestHeaders);\n            const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n            const { url } = this;\n            if (rawRequestOptions.signal !== undefined) {\n                fetchOptions.signal = rawRequestOptions.signal;\n            }\n            const { operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(rawRequestOptions.query);\n            return makeRequest({\n                url,\n                query: rawRequestOptions.query,\n                variables: rawRequestOptions.variables,\n                headers: {\n                    ...resolveHeaders(callOrIdentity(headers)),\n                    ...resolveHeaders(rawRequestOptions.requestHeaders),\n                },\n                operationName,\n                fetch,\n                method,\n                fetchOptions,\n                middleware: requestMiddleware,\n            })\n                .then((response) => {\n                if (responseMiddleware) {\n                    responseMiddleware(response);\n                }\n                return response;\n            })\n                .catch((error) => {\n                if (responseMiddleware) {\n                    responseMiddleware(error);\n                }\n                throw error;\n            });\n        };\n    }\n    async request(documentOrOptions, ...variablesAndRequestHeaders) {\n        const [variables, requestHeaders] = variablesAndRequestHeaders;\n        const requestOptions = (0, parseArgs_js_1.parseRequestArgs)(documentOrOptions, variables, requestHeaders);\n        const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n        const { url } = this;\n        if (requestOptions.signal !== undefined) {\n            fetchOptions.signal = requestOptions.signal;\n        }\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(requestOptions.document);\n        return makeRequest({\n            url,\n            query,\n            variables: requestOptions.variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(requestOptions.requestHeaders),\n            },\n            operationName,\n            fetch,\n            method,\n            fetchOptions,\n            middleware: requestMiddleware,\n        })\n            .then((response) => {\n            if (responseMiddleware) {\n                responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (responseMiddleware) {\n                responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    // prettier-ignore\n    batchRequests(documentsOrOptions, requestHeaders) {\n        const batchRequestOptions = (0, parseArgs_js_1.parseBatchRequestArgs)(documentsOrOptions, requestHeaders);\n        const { headers, ...fetchOptions } = this.requestConfig;\n        if (batchRequestOptions.signal !== undefined) {\n            fetchOptions.signal = batchRequestOptions.signal;\n        }\n        const queries = batchRequestOptions.documents.map(({ document }) => (0, resolveRequestDocument_js_1.resolveRequestDocument)(document).query);\n        const variables = batchRequestOptions.documents.map(({ variables }) => variables);\n        return makeRequest({\n            url: this.url,\n            query: queries,\n            // @ts-expect-error TODO reconcile batch variables into system.\n            variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(batchRequestOptions.requestHeaders),\n            },\n            operationName: undefined,\n            fetch: this.requestConfig.fetch ?? cross_fetch_1.default,\n            method: this.requestConfig.method || `POST`,\n            fetchOptions,\n            middleware: this.requestConfig.requestMiddleware,\n        })\n            .then((response) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    setHeaders(headers) {\n        this.requestConfig.headers = headers;\n        return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n    setHeader(key, value) {\n        const { headers } = this.requestConfig;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-expect-error todo\n            headers[key] = value;\n        }\n        else {\n            this.requestConfig.headers = { [key]: value };\n        }\n        return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n    setEndpoint(value) {\n        this.url = value;\n        return this;\n    }\n}\nexports.GraphQLClient = GraphQLClient;\nconst makeRequest = async (params) => {\n    const { query, variables, fetchOptions } = params;\n    const fetcher = createHttpMethodFetcher((0, helpers_js_1.uppercase)(params.method ?? `post`));\n    const isBatchingQuery = Array.isArray(params.query);\n    const response = await fetcher(params);\n    const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer);\n    const successfullyReceivedData = Array.isArray(result)\n        ? !result.some(({ data }) => !data)\n        : Boolean(result.data);\n    const successfullyPassedErrorPolicy = Array.isArray(result) ||\n        !result.errors ||\n        (Array.isArray(result.errors) && !result.errors.length) ||\n        fetchOptions.errorPolicy === `all` ||\n        fetchOptions.errorPolicy === `ignore`;\n    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n        // @ts-expect-error TODO fixme\n        const { errors: _, ...rest } = Array.isArray(result) ? result : result;\n        const data = fetchOptions.errorPolicy === `ignore` ? rest : result;\n        const dataEnvelope = isBatchingQuery ? { data } : data;\n        // @ts-expect-error TODO\n        return {\n            ...dataEnvelope,\n            headers: response.headers,\n            status: response.status,\n        };\n    }\n    else {\n        const errorResult = typeof result === `string`\n            ? {\n                error: result,\n            }\n            : result;\n        throw new types_js_1.ClientError(\n        // @ts-expect-error TODO\n        { ...errorResult, status: response.status, headers: response.headers }, { query, variables });\n    }\n};\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest = async (...args) => {\n    const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n    const requestOptions = (0, parseArgs_js_1.parseRawRequestExtendedArgs)(urlOrOptions, query, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.rawRequest({\n        ...requestOptions,\n    });\n};\nexports.rawRequest = rawRequest;\n// prettier-ignore\n// eslint-disable-next-line\nasync function request(urlOrOptions, document, ...variablesAndRequestHeaders) {\n    const requestOptions = (0, parseArgs_js_1.parseRequestExtendedArgs)(urlOrOptions, document, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.request({\n        ...requestOptions,\n    });\n}\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests = async (...args) => {\n    const params = parseBatchRequestsArgsExtended(args);\n    const client = new GraphQLClient(params.url);\n    return client.batchRequests(params);\n};\nexports.batchRequests = batchRequests;\nconst parseBatchRequestsArgsExtended = (args) => {\n    if (args.length === 1) {\n        return args[0];\n    }\n    else {\n        return {\n            url: args[0],\n            documents: args[1],\n            requestHeaders: args[2],\n            signal: undefined,\n        };\n    }\n};\nconst createRequestBody = (query, variables, operationName, jsonSerializer) => {\n    const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer;\n    if (!Array.isArray(query)) {\n        return jsonSerializer_.stringify({ query, variables, operationName });\n    }\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n        throw new Error(`Cannot create request body with given variable type, array expected`);\n    }\n    // Batch support\n    const payload = query.reduce((acc, currentQuery, index) => {\n        acc.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n        return acc;\n    }, []);\n    return jsonSerializer_.stringify(payload);\n};\nconst getResult = async (response, jsonSerializer) => {\n    let contentType;\n    response.headers.forEach((value, key) => {\n        if (key.toLowerCase() === `content-type`) {\n            contentType = value;\n        }\n    });\n    if (contentType &&\n        (contentType.toLowerCase().startsWith(`application/json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {\n        return jsonSerializer.parse(await response.text());\n    }\n    else {\n        return response.text();\n    }\n};\nconst callOrIdentity = (value) => {\n    return typeof value === `function` ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nconst gql = (chunks, ...variables) => {\n    return chunks.reduce((acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`, ``);\n};\nexports.gql = gql;\nvar graphql_ws_js_1 = __webpack_require__(/*! ./graphql-ws.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", ({ enumerable: true, get: function () { return graphql_ws_js_1.GraphQLWebSocketClient; } }));\nvar resolveRequestDocument_js_2 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nObject.defineProperty(exports, \"resolveRequestDocument\", ({ enumerable: true, get: function () { return resolveRequestDocument_js_2.resolveRequestDocument; } }));\nexports[\"default\"] = request;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/parseArgs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;\nconst parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {\n    return documentOrOptions.document\n        ? documentOrOptions\n        : {\n            document: documentOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRequestArgs = parseRequestArgs;\nconst parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {\n    return queryOrOptions.query\n        ? queryOrOptions\n        : {\n            query: queryOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRawRequestArgs = parseRawRequestArgs;\nconst parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {\n    return documentsOrOptions.documents\n        ? documentsOrOptions\n        : {\n            documents: documentsOrOptions,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseBatchRequestArgs = parseBatchRequestArgs;\nconst parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.document\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            document: document,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRequestExtendedArgs = parseRequestExtendedArgs;\nconst parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.query\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            query: query,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;\n//# sourceMappingURL=parseArgs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLEdBQUcsZ0NBQWdDLEdBQUcsNkJBQTZCLEdBQUcsMkJBQTJCLEdBQUcsd0JBQXdCO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZGllLWNhcnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanM/NmYwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gZXhwb3J0cy5wYXJzZVJlcXVlc3RFeHRlbmRlZEFyZ3MgPSBleHBvcnRzLnBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IGV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0QXJncyA9IGV4cG9ydHMucGFyc2VSZXF1ZXN0QXJncyA9IHZvaWQgMDtcbmNvbnN0IHBhcnNlUmVxdWVzdEFyZ3MgPSAoZG9jdW1lbnRPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnRPck9wdGlvbnMuZG9jdW1lbnRcbiAgICAgICAgPyBkb2N1bWVudE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJlcXVlc3RBcmdzID0gcGFyc2VSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlUmF3UmVxdWVzdEFyZ3MgPSAocXVlcnlPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gcXVlcnlPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyBxdWVyeU9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeU9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJhd1JlcXVlc3RBcmdzID0gcGFyc2VSYXdSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IChkb2N1bWVudHNPck9wdGlvbnMsIHJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50c09yT3B0aW9ucy5kb2N1bWVudHNcbiAgICAgICAgPyBkb2N1bWVudHNPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBkb2N1bWVudHM6IGRvY3VtZW50c09yT3B0aW9ucyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydHMucGFyc2VCYXRjaFJlcXVlc3RBcmdzID0gcGFyc2VCYXRjaFJlcXVlc3RBcmdzO1xuY29uc3QgcGFyc2VSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gKHVybE9yT3B0aW9ucywgZG9jdW1lbnQsIC4uLnZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgY29uc3QgW3ZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnNdID0gdmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnM7XG4gICAgcmV0dXJuIHVybE9yT3B0aW9ucy5kb2N1bWVudFxuICAgICAgICA/IHVybE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHVybDogdXJsT3JPcHRpb25zLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgICBzaWduYWw6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbn07XG5leHBvcnRzLnBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncyA9IHBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncztcbmNvbnN0IHBhcnNlUmF3UmVxdWVzdEV4dGVuZGVkQXJncyA9ICh1cmxPck9wdGlvbnMsIHF1ZXJ5LCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycykgPT4ge1xuICAgIGNvbnN0IFt2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzXSA9IHZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzO1xuICAgIHJldHVybiB1cmxPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyB1cmxPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICB1cmw6IHVybE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3MgPSBwYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUFyZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/resolveRequestDocument.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveRequestDocument = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.mjs\");\n/**\n * helpers\n */\nconst extractOperationName = (document) => {\n    let operationName = undefined;\n    const operationDefinitions = document.definitions.filter((definition) => definition.kind === `OperationDefinition`);\n    if (operationDefinitions.length === 1) {\n        operationName = operationDefinitions[0]?.name?.value;\n    }\n    return operationName;\n};\nconst resolveRequestDocument = (document) => {\n    if (typeof document === `string`) {\n        let operationName = undefined;\n        try {\n            const parsedDocument = (0, graphql_1.parse)(document);\n            operationName = extractOperationName(parsedDocument);\n        }\n        catch (err) {\n            // Failed parsing the document, the operationName will be undefined\n        }\n        return { query: document, operationName };\n    }\n    const operationName = extractOperationName(document);\n    return { query: (0, graphql_1.print)(document), operationName };\n};\nexports.resolveRequestDocument = resolveRequestDocument;\n//# sourceMappingURL=resolveRequestDocument.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZS1jYXJ0Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvcmVzb2x2ZVJlcXVlc3REb2N1bWVudC5qcz9jMGE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlUmVxdWVzdERvY3VtZW50ID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG4vKipcbiAqIGhlbHBlcnNcbiAqL1xuY29uc3QgZXh0cmFjdE9wZXJhdGlvbk5hbWUgPSAoZG9jdW1lbnQpID0+IHtcbiAgICBsZXQgb3BlcmF0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBvcGVyYXRpb25EZWZpbml0aW9ucyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcigoZGVmaW5pdGlvbikgPT4gZGVmaW5pdGlvbi5raW5kID09PSBgT3BlcmF0aW9uRGVmaW5pdGlvbmApO1xuICAgIGlmIChvcGVyYXRpb25EZWZpbml0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgb3BlcmF0aW9uTmFtZSA9IG9wZXJhdGlvbkRlZmluaXRpb25zWzBdPy5uYW1lPy52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbk5hbWU7XG59O1xuY29uc3QgcmVzb2x2ZVJlcXVlc3REb2N1bWVudCA9IChkb2N1bWVudCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IGBzdHJpbmdgKSB7XG4gICAgICAgIGxldCBvcGVyYXRpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRG9jdW1lbnQgPSAoMCwgZ3JhcGhxbF8xLnBhcnNlKShkb2N1bWVudCk7XG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lID0gZXh0cmFjdE9wZXJhdGlvbk5hbWUocGFyc2VkRG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIEZhaWxlZCBwYXJzaW5nIHRoZSBkb2N1bWVudCwgdGhlIG9wZXJhdGlvbk5hbWUgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBxdWVyeTogZG9jdW1lbnQsIG9wZXJhdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IGV4dHJhY3RPcGVyYXRpb25OYW1lKGRvY3VtZW50KTtcbiAgICByZXR1cm4geyBxdWVyeTogKDAsIGdyYXBocWxfMS5wcmludCkoZG9jdW1lbnQpLCBvcGVyYXRpb25OYW1lIH07XG59O1xuZXhwb3J0cy5yZXNvbHZlUmVxdWVzdERvY3VtZW50ID0gcmVzb2x2ZVJlcXVlc3REb2N1bWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVSZXF1ZXN0RG9jdW1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientError = void 0;\nclass ClientError extends Error {\n    constructor(response, request) {\n        const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n            response,\n            request,\n        })}`;\n        super(message);\n        Object.setPrototypeOf(this, ClientError.prototype);\n        this.response = response;\n        this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === `function`) {\n            Error.captureStackTrace(this, ClientError);\n        }\n    }\n    static extractMessage(response) {\n        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;\n    }\n}\nexports.ClientError = ClientError;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLDJCQUEyQixxQ0FBcUMsSUFBSTtBQUNwRTtBQUNBO0FBQ0EsU0FBUyxFQUFFO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsZ0JBQWdCO0FBQ3hGO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kaWUtY2FydC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL3R5cGVzLmpzPzBhODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudEVycm9yID0gdm9pZCAwO1xuY2xhc3MgQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2UsIHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke0NsaWVudEVycm9yLmV4dHJhY3RNZXNzYWdlKHJlc3BvbnNlKX06ICR7SlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICB9KX1gO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsaWVudEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgLy8gdGhpcyBpcyBuZWVkZWQgYXMgU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCAuY2FwdHVyZVN0YWNrVHJhY2VcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gYGZ1bmN0aW9uYCkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ2xpZW50RXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBleHRyYWN0TWVzc2FnZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZXJyb3JzPy5bMF0/Lm1lc3NhZ2UgPz8gYEdyYXBoUUwgRXJyb3IgKENvZGU6ICR7cmVzcG9uc2Uuc3RhdHVzfSlgO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50RXJyb3IgPSBDbGllbnRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultJsonSerializer = void 0;\nexports.defaultJsonSerializer = JSON;\n//# sourceMappingURL=defaultJsonSerializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZS1jYXJ0Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvZGVmYXVsdEpzb25TZXJpYWxpemVyLmpzPzRhMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRKc29uU2VyaWFsaXplciA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdEpzb25TZXJpYWxpemVyID0gSlNPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRKc29uU2VyaWFsaXplci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/graphql-ws.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/graphql-ws.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GraphQLWebSocketClient = void 0;\n/* eslint-disable */\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/types.js\");\n// import type WebSocket from 'ws'\nconst CONNECTION_INIT = `connection_init`;\nconst CONNECTION_ACK = `connection_ack`;\nconst PING = `ping`;\nconst PONG = `pong`;\nconst SUBSCRIBE = `subscribe`;\nconst NEXT = `next`;\nconst ERROR = `error`;\nconst COMPLETE = `complete`;\nclass GraphQLWebSocketMessage {\n    get type() {\n        return this._type;\n    }\n    get id() {\n        return this._id;\n    }\n    get payload() {\n        return this._payload;\n    }\n    constructor(type, payload, id) {\n        this._type = type;\n        this._payload = payload;\n        this._id = id;\n    }\n    get text() {\n        const result = { type: this.type };\n        if (this.id != null && this.id != undefined)\n            result.id = this.id;\n        if (this.payload != null && this.payload != undefined)\n            result.payload = this.payload;\n        return JSON.stringify(result);\n    }\n    static parse(data, f) {\n        const { type, payload, id } = JSON.parse(data);\n        return new GraphQLWebSocketMessage(type, f(payload), id);\n    }\n}\nclass GraphQLWebSocketClient {\n    constructor(socket, { onInit, onAcknowledged, onPing, onPong }) {\n        this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };\n        this.socket = socket;\n        socket.addEventListener(`open`, async (e) => {\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n            socket.send(ConnectionInit(onInit ? await onInit() : null).text);\n        });\n        socket.addEventListener(`close`, (e) => {\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n        });\n        socket.addEventListener(`error`, (e) => {\n            console.error(e);\n        });\n        socket.addEventListener(`message`, (e) => {\n            try {\n                const message = parseMessage(e.data);\n                switch (message.type) {\n                    case CONNECTION_ACK: {\n                        if (this.socketState.acknowledged) {\n                            console.warn(`Duplicate CONNECTION_ACK message ignored`);\n                        }\n                        else {\n                            this.socketState.acknowledged = true;\n                            if (onAcknowledged)\n                                onAcknowledged(message.payload);\n                        }\n                        return;\n                    }\n                    case PING: {\n                        if (onPing)\n                            onPing(message.payload).then((r) => socket.send(Pong(r).text));\n                        else\n                            socket.send(Pong(null).text);\n                        return;\n                    }\n                    case PONG: {\n                        if (onPong)\n                            onPong(message.payload);\n                        return;\n                    }\n                }\n                if (!this.socketState.acknowledged) {\n                    // Web-socket connection not acknowledged\n                    return;\n                }\n                if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n                    // No subscription identifer or subscription indentifier is not found\n                    return;\n                }\n                const { query, variables, subscriber } = this.socketState.subscriptions[message.id];\n                switch (message.type) {\n                    case NEXT: {\n                        if (!message.payload.errors && message.payload.data) {\n                            subscriber.next && subscriber.next(message.payload.data);\n                        }\n                        if (message.payload.errors) {\n                            subscriber.error &&\n                                subscriber.error(new types_js_1.ClientError({ ...message.payload, status: 200 }, { query, variables }));\n                        }\n                        else {\n                        }\n                        return;\n                    }\n                    case ERROR: {\n                        subscriber.error &&\n                            subscriber.error(new types_js_1.ClientError({ errors: message.payload, status: 200 }, { query, variables }));\n                        return;\n                    }\n                    case COMPLETE: {\n                        subscriber.complete && subscriber.complete();\n                        delete this.socketState.subscriptions[message.id];\n                        return;\n                    }\n                }\n            }\n            catch (e) {\n                // Unexpected errors while handling graphql-ws message\n                console.error(e);\n                socket.close(1006);\n            }\n            socket.close(4400, `Unknown graphql-ws message.`);\n        });\n    }\n    makeSubscribe(query, operationName, subscriber, variables) {\n        const subscriptionId = (this.socketState.lastRequestId++).toString();\n        this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };\n        this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);\n        return () => {\n            this.socket.send(Complete(subscriptionId).text);\n            delete this.socketState.subscriptions[subscriptionId];\n        };\n    }\n    rawRequest(query, variables) {\n        return new Promise((resolve, reject) => {\n            let result;\n            this.rawSubscribe(query, {\n                next: (data, extensions) => (result = { data, extensions }),\n                error: reject,\n                complete: () => resolve(result),\n            }, variables);\n        });\n    }\n    request(document, variables) {\n        return new Promise((resolve, reject) => {\n            let result;\n            this.subscribe(document, {\n                next: (data) => (result = data),\n                error: reject,\n                complete: () => resolve(result),\n            }, variables);\n        });\n    }\n    subscribe(document, subscriber, variables) {\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(document);\n        return this.makeSubscribe(query, operationName, subscriber, variables);\n    }\n    rawSubscribe(query, subscriber, variables) {\n        return this.makeSubscribe(query, undefined, subscriber, variables);\n    }\n    ping(payload) {\n        this.socket.send(Ping(payload).text);\n    }\n    close() {\n        this.socket.close(1000);\n    }\n}\nGraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;\nexports.GraphQLWebSocketClient = GraphQLWebSocketClient;\n// Helper functions\nfunction parseMessage(data, f = (a) => a) {\n    const m = GraphQLWebSocketMessage.parse(data, f);\n    return m;\n}\nfunction ConnectionInit(payload) {\n    return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);\n}\nfunction Ping(payload) {\n    return new GraphQLWebSocketMessage(PING, payload, undefined);\n}\nfunction Pong(payload) {\n    return new GraphQLWebSocketMessage(PONG, payload, undefined);\n}\nfunction Subscribe(id, payload) {\n    return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);\n}\nfunction Complete(id) {\n    return new GraphQLWebSocketMessage(COMPLETE, undefined, id);\n}\n//# sourceMappingURL=graphql-ws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/graphql-ws.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HeadersInstanceToPlainObject = exports.uppercase = void 0;\nconst uppercase = (str) => str.toUpperCase();\nexports.uppercase = uppercase;\n/**\n * Convert Headers instance into regular object\n */\nconst HeadersInstanceToPlainObject = (headers) => {\n    const o = {};\n    headers.forEach((v, k) => {\n        o[k] = v;\n    });\n    return o;\n};\nexports.HeadersInstanceToPlainObject = HeadersInstanceToPlainObject;\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLGlCQUFpQjtBQUN4RDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZGllLWNhcnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzP2M0NzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSBleHBvcnRzLnVwcGVyY2FzZSA9IHZvaWQgMDtcbmNvbnN0IHVwcGVyY2FzZSA9IChzdHIpID0+IHN0ci50b1VwcGVyQ2FzZSgpO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG4vKipcbiAqIENvbnZlcnQgSGVhZGVycyBpbnN0YW5jZSBpbnRvIHJlZ3VsYXIgb2JqZWN0XG4gKi9cbmNvbnN0IEhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSAoaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IG8gPSB7fTtcbiAgICBoZWFkZXJzLmZvckVhY2goKHYsIGspID0+IHtcbiAgICAgICAgb1trXSA9IHY7XG4gICAgfSk7XG4gICAgcmV0dXJuIG87XG59O1xuZXhwb3J0cy5IZWFkZXJzSW5zdGFuY2VUb1BsYWluT2JqZWN0ID0gSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = exports.batchRequests = exports.resolveRequestDocument = exports.GraphQLWebSocketClient = exports.gql = void 0;\nconst defaultJsonSerializer_js_1 = __webpack_require__(/*! ./defaultJsonSerializer.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\");\nconst helpers_js_1 = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/helpers.js\");\nconst parseArgs_js_1 = __webpack_require__(/*! ./parseArgs.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/parseArgs.js\");\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/types.js\");\nObject.defineProperty(exports, \"ClientError\", ({ enumerable: true, get: function () { return types_js_1.ClientError; } }));\nconst cross_fetch_1 = __importStar(__webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\")), CrossFetch = cross_fetch_1;\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers) => {\n    let oHeaders = {};\n    if (headers) {\n        if ((typeof Headers !== `undefined` && headers instanceof Headers) ||\n            (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)) {\n            oHeaders = (0, helpers_js_1.HeadersInstanceToPlainObject)(headers);\n        }\n        else if (Array.isArray(headers)) {\n            headers.forEach(([name, value]) => {\n                if (name && value !== undefined) {\n                    oHeaders[name] = value;\n                }\n            });\n        }\n        else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str) => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = (params) => {\n    if (!Array.isArray(params.query)) {\n        const params_ = params;\n        const search = [`query=${encodeURIComponent(cleanQuery(params_.query))}`];\n        if (params.variables) {\n            search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`);\n        }\n        if (params_.operationName) {\n            search.push(`operationName=${encodeURIComponent(params_.operationName)}`);\n        }\n        return search.join(`&`);\n    }\n    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n        throw new Error(`Cannot create query with given variable type, array expected`);\n    }\n    // Batch support\n    const params_ = params;\n    const payload = params.query.reduce((acc, currentQuery, index) => {\n        acc.push({\n            query: cleanQuery(currentQuery),\n            variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n        });\n        return acc;\n    }, []);\n    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;\n};\nconst createHttpMethodFetcher = (method) => async (params) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params;\n    const headers = { ...params.headers };\n    let queryParams = ``;\n    let body = undefined;\n    if (method === `POST`) {\n        body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);\n        if (typeof body === `string`) {\n            // @ts-expect-error todo\n            headers[`Content-Type`] = `application/json`;\n        }\n    }\n    else {\n        // @ts-expect-error todo needs ADT for TS to understand the different states\n        queryParams = buildRequestConfig({\n            query,\n            variables,\n            operationName,\n            jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer,\n        });\n    }\n    const init = {\n        method,\n        headers,\n        body,\n        ...fetchOptions,\n    };\n    let urlResolved = url;\n    let initResolved = init;\n    if (middleware) {\n        const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }));\n        const { url: urlNew, ...initNew } = result;\n        urlResolved = urlNew;\n        initResolved = initNew;\n    }\n    if (queryParams) {\n        urlResolved = `${urlResolved}?${queryParams}`;\n    }\n    return await fetch(urlResolved, initResolved);\n};\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n    constructor(url, requestConfig = {}) {\n        this.url = url;\n        this.requestConfig = requestConfig;\n        /**\n         * Send a GraphQL query to the server.\n         */\n        this.rawRequest = async (...args) => {\n            const [queryOrOptions, variables, requestHeaders] = args;\n            const rawRequestOptions = (0, parseArgs_js_1.parseRawRequestArgs)(queryOrOptions, variables, requestHeaders);\n            const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n            const { url } = this;\n            if (rawRequestOptions.signal !== undefined) {\n                fetchOptions.signal = rawRequestOptions.signal;\n            }\n            const { operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(rawRequestOptions.query);\n            return makeRequest({\n                url,\n                query: rawRequestOptions.query,\n                variables: rawRequestOptions.variables,\n                headers: {\n                    ...resolveHeaders(callOrIdentity(headers)),\n                    ...resolveHeaders(rawRequestOptions.requestHeaders),\n                },\n                operationName,\n                fetch,\n                method,\n                fetchOptions,\n                middleware: requestMiddleware,\n            })\n                .then((response) => {\n                if (responseMiddleware) {\n                    responseMiddleware(response);\n                }\n                return response;\n            })\n                .catch((error) => {\n                if (responseMiddleware) {\n                    responseMiddleware(error);\n                }\n                throw error;\n            });\n        };\n    }\n    async request(documentOrOptions, ...variablesAndRequestHeaders) {\n        const [variables, requestHeaders] = variablesAndRequestHeaders;\n        const requestOptions = (0, parseArgs_js_1.parseRequestArgs)(documentOrOptions, variables, requestHeaders);\n        const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n        const { url } = this;\n        if (requestOptions.signal !== undefined) {\n            fetchOptions.signal = requestOptions.signal;\n        }\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(requestOptions.document);\n        return makeRequest({\n            url,\n            query,\n            variables: requestOptions.variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(requestOptions.requestHeaders),\n            },\n            operationName,\n            fetch,\n            method,\n            fetchOptions,\n            middleware: requestMiddleware,\n        })\n            .then((response) => {\n            if (responseMiddleware) {\n                responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (responseMiddleware) {\n                responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    // prettier-ignore\n    batchRequests(documentsOrOptions, requestHeaders) {\n        const batchRequestOptions = (0, parseArgs_js_1.parseBatchRequestArgs)(documentsOrOptions, requestHeaders);\n        const { headers, ...fetchOptions } = this.requestConfig;\n        if (batchRequestOptions.signal !== undefined) {\n            fetchOptions.signal = batchRequestOptions.signal;\n        }\n        const queries = batchRequestOptions.documents.map(({ document }) => (0, resolveRequestDocument_js_1.resolveRequestDocument)(document).query);\n        const variables = batchRequestOptions.documents.map(({ variables }) => variables);\n        return makeRequest({\n            url: this.url,\n            query: queries,\n            // @ts-expect-error TODO reconcile batch variables into system.\n            variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(batchRequestOptions.requestHeaders),\n            },\n            operationName: undefined,\n            fetch: this.requestConfig.fetch ?? cross_fetch_1.default,\n            method: this.requestConfig.method || `POST`,\n            fetchOptions,\n            middleware: this.requestConfig.requestMiddleware,\n        })\n            .then((response) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    setHeaders(headers) {\n        this.requestConfig.headers = headers;\n        return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n    setHeader(key, value) {\n        const { headers } = this.requestConfig;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-expect-error todo\n            headers[key] = value;\n        }\n        else {\n            this.requestConfig.headers = { [key]: value };\n        }\n        return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n    setEndpoint(value) {\n        this.url = value;\n        return this;\n    }\n}\nexports.GraphQLClient = GraphQLClient;\nconst makeRequest = async (params) => {\n    const { query, variables, fetchOptions } = params;\n    const fetcher = createHttpMethodFetcher((0, helpers_js_1.uppercase)(params.method ?? `post`));\n    const isBatchingQuery = Array.isArray(params.query);\n    const response = await fetcher(params);\n    const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer);\n    const successfullyReceivedData = Array.isArray(result)\n        ? !result.some(({ data }) => !data)\n        : Boolean(result.data);\n    const successfullyPassedErrorPolicy = Array.isArray(result) ||\n        !result.errors ||\n        (Array.isArray(result.errors) && !result.errors.length) ||\n        fetchOptions.errorPolicy === `all` ||\n        fetchOptions.errorPolicy === `ignore`;\n    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n        // @ts-expect-error TODO fixme\n        const { errors: _, ...rest } = Array.isArray(result) ? result : result;\n        const data = fetchOptions.errorPolicy === `ignore` ? rest : result;\n        const dataEnvelope = isBatchingQuery ? { data } : data;\n        // @ts-expect-error TODO\n        return {\n            ...dataEnvelope,\n            headers: response.headers,\n            status: response.status,\n        };\n    }\n    else {\n        const errorResult = typeof result === `string`\n            ? {\n                error: result,\n            }\n            : result;\n        throw new types_js_1.ClientError(\n        // @ts-expect-error TODO\n        { ...errorResult, status: response.status, headers: response.headers }, { query, variables });\n    }\n};\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest = async (...args) => {\n    const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n    const requestOptions = (0, parseArgs_js_1.parseRawRequestExtendedArgs)(urlOrOptions, query, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.rawRequest({\n        ...requestOptions,\n    });\n};\nexports.rawRequest = rawRequest;\n// prettier-ignore\n// eslint-disable-next-line\nasync function request(urlOrOptions, document, ...variablesAndRequestHeaders) {\n    const requestOptions = (0, parseArgs_js_1.parseRequestExtendedArgs)(urlOrOptions, document, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.request({\n        ...requestOptions,\n    });\n}\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests = async (...args) => {\n    const params = parseBatchRequestsArgsExtended(args);\n    const client = new GraphQLClient(params.url);\n    return client.batchRequests(params);\n};\nexports.batchRequests = batchRequests;\nconst parseBatchRequestsArgsExtended = (args) => {\n    if (args.length === 1) {\n        return args[0];\n    }\n    else {\n        return {\n            url: args[0],\n            documents: args[1],\n            requestHeaders: args[2],\n            signal: undefined,\n        };\n    }\n};\nconst createRequestBody = (query, variables, operationName, jsonSerializer) => {\n    const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer;\n    if (!Array.isArray(query)) {\n        return jsonSerializer_.stringify({ query, variables, operationName });\n    }\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n        throw new Error(`Cannot create request body with given variable type, array expected`);\n    }\n    // Batch support\n    const payload = query.reduce((acc, currentQuery, index) => {\n        acc.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n        return acc;\n    }, []);\n    return jsonSerializer_.stringify(payload);\n};\nconst getResult = async (response, jsonSerializer) => {\n    let contentType;\n    response.headers.forEach((value, key) => {\n        if (key.toLowerCase() === `content-type`) {\n            contentType = value;\n        }\n    });\n    if (contentType &&\n        (contentType.toLowerCase().startsWith(`application/json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {\n        return jsonSerializer.parse(await response.text());\n    }\n    else {\n        return response.text();\n    }\n};\nconst callOrIdentity = (value) => {\n    return typeof value === `function` ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nconst gql = (chunks, ...variables) => {\n    return chunks.reduce((acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`, ``);\n};\nexports.gql = gql;\nvar graphql_ws_js_1 = __webpack_require__(/*! ./graphql-ws.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/graphql-ws.js\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", ({ enumerable: true, get: function () { return graphql_ws_js_1.GraphQLWebSocketClient; } }));\nvar resolveRequestDocument_js_2 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(rsc)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nObject.defineProperty(exports, \"resolveRequestDocument\", ({ enumerable: true, get: function () { return resolveRequestDocument_js_2.resolveRequestDocument; } }));\nexports[\"default\"] = request;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGtCQUFrQixHQUFHLHFCQUFxQixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLDhCQUE4QixHQUFHLDhCQUE4QixHQUFHLFdBQVc7QUFDMUwsbUNBQW1DLG1CQUFPLENBQUMsMkdBQTRCO0FBQ3ZFLHFCQUFxQixtQkFBTyxDQUFDLCtFQUFjO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLG1GQUFnQjtBQUMvQyxvQ0FBb0MsbUJBQU8sQ0FBQyw2R0FBNkI7QUFDekUsbUJBQW1CLG1CQUFPLENBQUMsMkVBQVk7QUFDdkMsK0NBQThDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3hILG1DQUFtQyxtQkFBTyxDQUFDLDJFQUFhO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDhDQUE4QztBQUMvRTtBQUNBLHFDQUFxQyx3RUFBd0U7QUFDN0c7QUFDQTtBQUNBLHlDQUF5QywwQ0FBMEM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLG9CQUFvQiw4REFBOEQ7QUFDbEY7QUFDQTtBQUNBLFlBQVksd0VBQXdFO0FBQ3BGLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCx3Q0FBd0M7QUFDbEcsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixZQUFZLEdBQUcsWUFBWTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtIQUFrSDtBQUN0SSxvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0hBQWtIO0FBQ2xJLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1QkFBdUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMkJBQTJCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxVQUFVO0FBQ3ZFLCtEQUErRCxXQUFXO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE1BQU07QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckM7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG9FQUFvRSxJQUFJLGtCQUFrQjtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsaUJBQWlCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGlDQUFpQztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMEVBQTBFO0FBQzdGO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxJQUFJLEVBQUUsTUFBTSxFQUFFLG1EQUFtRDtBQUNwSDtBQUNBLFdBQVc7QUFDWCxzQkFBc0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDL0MsMERBQXlELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQ25KLGtDQUFrQyxtQkFBTyxDQUFDLDZHQUE2QjtBQUN2RSwwREFBeUQsRUFBRSxxQ0FBcUMsOERBQThELEVBQUM7QUFDL0osa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZS1jYXJ0Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvaW5kZXguanM/NmU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXF1ZXN0ID0gZXhwb3J0cy5yYXdSZXF1ZXN0ID0gZXhwb3J0cy5HcmFwaFFMQ2xpZW50ID0gZXhwb3J0cy5DbGllbnRFcnJvciA9IGV4cG9ydHMuYmF0Y2hSZXF1ZXN0cyA9IGV4cG9ydHMucmVzb2x2ZVJlcXVlc3REb2N1bWVudCA9IGV4cG9ydHMuR3JhcGhRTFdlYlNvY2tldENsaWVudCA9IGV4cG9ydHMuZ3FsID0gdm9pZCAwO1xuY29uc3QgZGVmYXVsdEpzb25TZXJpYWxpemVyX2pzXzEgPSByZXF1aXJlKFwiLi9kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanNcIik7XG5jb25zdCBoZWxwZXJzX2pzXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzLmpzXCIpO1xuY29uc3QgcGFyc2VBcmdzX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZUFyZ3MuanNcIik7XG5jb25zdCByZXNvbHZlUmVxdWVzdERvY3VtZW50X2pzXzEgPSByZXF1aXJlKFwiLi9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzXCIpO1xuY29uc3QgdHlwZXNfanNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xpZW50RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzX2pzXzEuQ2xpZW50RXJyb3I7IH0gfSk7XG5jb25zdCBjcm9zc19mZXRjaF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKSksIENyb3NzRmV0Y2ggPSBjcm9zc19mZXRjaF8xO1xuLyoqXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBoZWFkZXJzIGNvbmZpZ3VyYXRpb24gaW50byBhIHBsYWluIG9iamVjdC5cbiAqL1xuY29uc3QgcmVzb2x2ZUhlYWRlcnMgPSAoaGVhZGVycykgPT4ge1xuICAgIGxldCBvSGVhZGVycyA9IHt9O1xuICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICAgIGlmICgodHlwZW9mIEhlYWRlcnMgIT09IGB1bmRlZmluZWRgICYmIGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB8fFxuICAgICAgICAgICAgKENyb3NzRmV0Y2ggJiYgQ3Jvc3NGZXRjaC5IZWFkZXJzICYmIGhlYWRlcnMgaW5zdGFuY2VvZiBDcm9zc0ZldGNoLkhlYWRlcnMpKSB7XG4gICAgICAgICAgICBvSGVhZGVycyA9ICgwLCBoZWxwZXJzX2pzXzEuSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdCkoaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgICAgICAgaGVhZGVycy5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvSGVhZGVyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb0hlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvSGVhZGVycztcbn07XG4vKipcbiAqIENsZWFuIGEgR3JhcGhRTCBkb2N1bWVudCB0byBzZW5kIGl0IHZpYSBhIEdFVCBxdWVyeVxuICovXG5jb25zdCBjbGVhblF1ZXJ5ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoLyhbXFxzLF18I1teXFxuXFxyXSspKy9nLCBgIGApLnRyaW0oKTtcbi8qKlxuICogQ3JlYXRlIHF1ZXJ5IHN0cmluZyBmb3IgR3JhcGhRTCByZXF1ZXN0XG4gKi9cbmNvbnN0IGJ1aWxkUmVxdWVzdENvbmZpZyA9IChwYXJhbXMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1zLnF1ZXJ5KSkge1xuICAgICAgICBjb25zdCBwYXJhbXNfID0gcGFyYW1zO1xuICAgICAgICBjb25zdCBzZWFyY2ggPSBbYHF1ZXJ5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGNsZWFuUXVlcnkocGFyYW1zXy5xdWVyeSkpfWBdO1xuICAgICAgICBpZiAocGFyYW1zLnZhcmlhYmxlcykge1xuICAgICAgICAgICAgc2VhcmNoLnB1c2goYHZhcmlhYmxlcz0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXNfLmpzb25TZXJpYWxpemVyLnN0cmluZ2lmeShwYXJhbXNfLnZhcmlhYmxlcykpfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXNfLm9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIHNlYXJjaC5wdXNoKGBvcGVyYXRpb25OYW1lPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc18ub3BlcmF0aW9uTmFtZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlYXJjaC5qb2luKGAmYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyYW1zLnZhcmlhYmxlcyAhPT0gYHVuZGVmaW5lZGAgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1zLnZhcmlhYmxlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIHF1ZXJ5IHdpdGggZ2l2ZW4gdmFyaWFibGUgdHlwZSwgYXJyYXkgZXhwZWN0ZWRgKTtcbiAgICB9XG4gICAgLy8gQmF0Y2ggc3VwcG9ydFxuICAgIGNvbnN0IHBhcmFtc18gPSBwYXJhbXM7XG4gICAgY29uc3QgcGF5bG9hZCA9IHBhcmFtcy5xdWVyeS5yZWR1Y2UoKGFjYywgY3VycmVudFF1ZXJ5LCBpbmRleCkgPT4ge1xuICAgICAgICBhY2MucHVzaCh7XG4gICAgICAgICAgICBxdWVyeTogY2xlYW5RdWVyeShjdXJyZW50UXVlcnkpLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBwYXJhbXNfLnZhcmlhYmxlcyA/IHBhcmFtc18uanNvblNlcmlhbGl6ZXIuc3RyaW5naWZ5KHBhcmFtc18udmFyaWFibGVzW2luZGV4XSkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gYHF1ZXJ5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc18uanNvblNlcmlhbGl6ZXIuc3RyaW5naWZ5KHBheWxvYWQpKX1gO1xufTtcbmNvbnN0IGNyZWF0ZUh0dHBNZXRob2RGZXRjaGVyID0gKG1ldGhvZCkgPT4gYXN5bmMgKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHsgdXJsLCBxdWVyeSwgdmFyaWFibGVzLCBvcGVyYXRpb25OYW1lLCBmZXRjaCwgZmV0Y2hPcHRpb25zLCBtaWRkbGV3YXJlIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHsgLi4ucGFyYW1zLmhlYWRlcnMgfTtcbiAgICBsZXQgcXVlcnlQYXJhbXMgPSBgYDtcbiAgICBsZXQgYm9keSA9IHVuZGVmaW5lZDtcbiAgICBpZiAobWV0aG9kID09PSBgUE9TVGApIHtcbiAgICAgICAgYm9keSA9IGNyZWF0ZVJlcXVlc3RCb2R5KHF1ZXJ5LCB2YXJpYWJsZXMsIG9wZXJhdGlvbk5hbWUsIGZldGNoT3B0aW9ucy5qc29uU2VyaWFsaXplcik7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gYHN0cmluZ2ApIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdG9kb1xuICAgICAgICAgICAgaGVhZGVyc1tgQ29udGVudC1UeXBlYF0gPSBgYXBwbGljYXRpb24vanNvbmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdG9kbyBuZWVkcyBBRFQgZm9yIFRTIHRvIHVuZGVyc3RhbmQgdGhlIGRpZmZlcmVudCBzdGF0ZXNcbiAgICAgICAgcXVlcnlQYXJhbXMgPSBidWlsZFJlcXVlc3RDb25maWcoe1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lLFxuICAgICAgICAgICAganNvblNlcmlhbGl6ZXI6IGZldGNoT3B0aW9ucy5qc29uU2VyaWFsaXplciA/PyBkZWZhdWx0SnNvblNlcmlhbGl6ZXJfanNfMS5kZWZhdWx0SnNvblNlcmlhbGl6ZXIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBpbml0ID0ge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGJvZHksXG4gICAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICB9O1xuICAgIGxldCB1cmxSZXNvbHZlZCA9IHVybDtcbiAgICBsZXQgaW5pdFJlc29sdmVkID0gaW5pdDtcbiAgICBpZiAobWlkZGxld2FyZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUobWlkZGxld2FyZSh7IC4uLmluaXQsIHVybCwgb3BlcmF0aW9uTmFtZSwgdmFyaWFibGVzIH0pKTtcbiAgICAgICAgY29uc3QgeyB1cmw6IHVybE5ldywgLi4uaW5pdE5ldyB9ID0gcmVzdWx0O1xuICAgICAgICB1cmxSZXNvbHZlZCA9IHVybE5ldztcbiAgICAgICAgaW5pdFJlc29sdmVkID0gaW5pdE5ldztcbiAgICB9XG4gICAgaWYgKHF1ZXJ5UGFyYW1zKSB7XG4gICAgICAgIHVybFJlc29sdmVkID0gYCR7dXJsUmVzb2x2ZWR9PyR7cXVlcnlQYXJhbXN9YDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKHVybFJlc29sdmVkLCBpbml0UmVzb2x2ZWQpO1xufTtcbi8qKlxuICogR3JhcGhRTCBDbGllbnQuXG4gKi9cbmNsYXNzIEdyYXBoUUxDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKHVybCwgcmVxdWVzdENvbmZpZyA9IHt9KSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnJlcXVlc3RDb25maWcgPSByZXF1ZXN0Q29uZmlnO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VuZCBhIEdyYXBoUUwgcXVlcnkgdG8gdGhlIHNlcnZlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmF3UmVxdWVzdCA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbcXVlcnlPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnNdID0gYXJncztcbiAgICAgICAgICAgIGNvbnN0IHJhd1JlcXVlc3RPcHRpb25zID0gKDAsIHBhcnNlQXJnc19qc18xLnBhcnNlUmF3UmVxdWVzdEFyZ3MpKHF1ZXJ5T3JPcHRpb25zLCB2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVhZGVycywgZmV0Y2ggPSBjcm9zc19mZXRjaF8xLmRlZmF1bHQsIG1ldGhvZCA9IGBQT1NUYCwgcmVxdWVzdE1pZGRsZXdhcmUsIHJlc3BvbnNlTWlkZGxld2FyZSwgLi4uZmV0Y2hPcHRpb25zIH0gPSB0aGlzLnJlcXVlc3RDb25maWc7XG4gICAgICAgICAgICBjb25zdCB7IHVybCB9ID0gdGhpcztcbiAgICAgICAgICAgIGlmIChyYXdSZXF1ZXN0T3B0aW9ucy5zaWduYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZldGNoT3B0aW9ucy5zaWduYWwgPSByYXdSZXF1ZXN0T3B0aW9ucy5zaWduYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IG9wZXJhdGlvbk5hbWUgfSA9ICgwLCByZXNvbHZlUmVxdWVzdERvY3VtZW50X2pzXzEucmVzb2x2ZVJlcXVlc3REb2N1bWVudCkocmF3UmVxdWVzdE9wdGlvbnMucXVlcnkpO1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgcXVlcnk6IHJhd1JlcXVlc3RPcHRpb25zLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogcmF3UmVxdWVzdE9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVzb2x2ZUhlYWRlcnMoY2FsbE9ySWRlbnRpdHkoaGVhZGVycykpLFxuICAgICAgICAgICAgICAgICAgICAuLi5yZXNvbHZlSGVhZGVycyhyYXdSZXF1ZXN0T3B0aW9ucy5yZXF1ZXN0SGVhZGVycyksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIGZldGNoLFxuICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICBmZXRjaE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZTogcmVxdWVzdE1pZGRsZXdhcmUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZU1pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VNaWRkbGV3YXJlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlTWlkZGxld2FyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZU1pZGRsZXdhcmUoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyByZXF1ZXN0KGRvY3VtZW50T3JPcHRpb25zLCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycykge1xuICAgICAgICBjb25zdCBbdmFyaWFibGVzLCByZXF1ZXN0SGVhZGVyc10gPSB2YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycztcbiAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSAoMCwgcGFyc2VBcmdzX2pzXzEucGFyc2VSZXF1ZXN0QXJncykoZG9jdW1lbnRPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMsIGZldGNoID0gY3Jvc3NfZmV0Y2hfMS5kZWZhdWx0LCBtZXRob2QgPSBgUE9TVGAsIHJlcXVlc3RNaWRkbGV3YXJlLCByZXNwb25zZU1pZGRsZXdhcmUsIC4uLmZldGNoT3B0aW9ucyB9ID0gdGhpcy5yZXF1ZXN0Q29uZmlnO1xuICAgICAgICBjb25zdCB7IHVybCB9ID0gdGhpcztcbiAgICAgICAgaWYgKHJlcXVlc3RPcHRpb25zLnNpZ25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmZXRjaE9wdGlvbnMuc2lnbmFsID0gcmVxdWVzdE9wdGlvbnMuc2lnbmFsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgcXVlcnksIG9wZXJhdGlvbk5hbWUgfSA9ICgwLCByZXNvbHZlUmVxdWVzdERvY3VtZW50X2pzXzEucmVzb2x2ZVJlcXVlc3REb2N1bWVudCkocmVxdWVzdE9wdGlvbnMuZG9jdW1lbnQpO1xuICAgICAgICByZXR1cm4gbWFrZVJlcXVlc3Qoe1xuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICB2YXJpYWJsZXM6IHJlcXVlc3RPcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNvbHZlSGVhZGVycyhjYWxsT3JJZGVudGl0eShoZWFkZXJzKSksXG4gICAgICAgICAgICAgICAgLi4ucmVzb2x2ZUhlYWRlcnMocmVxdWVzdE9wdGlvbnMucmVxdWVzdEhlYWRlcnMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wZXJhdGlvbk5hbWUsXG4gICAgICAgICAgICBmZXRjaCxcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIGZldGNoT3B0aW9ucyxcbiAgICAgICAgICAgIG1pZGRsZXdhcmU6IHJlcXVlc3RNaWRkbGV3YXJlLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VNaWRkbGV3YXJlKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VNaWRkbGV3YXJlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlTWlkZGxld2FyZSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlTWlkZGxld2FyZShlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGJhdGNoUmVxdWVzdHMoZG9jdW1lbnRzT3JPcHRpb25zLCByZXF1ZXN0SGVhZGVycykge1xuICAgICAgICBjb25zdCBiYXRjaFJlcXVlc3RPcHRpb25zID0gKDAsIHBhcnNlQXJnc19qc18xLnBhcnNlQmF0Y2hSZXF1ZXN0QXJncykoZG9jdW1lbnRzT3JPcHRpb25zLCByZXF1ZXN0SGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHsgaGVhZGVycywgLi4uZmV0Y2hPcHRpb25zIH0gPSB0aGlzLnJlcXVlc3RDb25maWc7XG4gICAgICAgIGlmIChiYXRjaFJlcXVlc3RPcHRpb25zLnNpZ25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmZXRjaE9wdGlvbnMuc2lnbmFsID0gYmF0Y2hSZXF1ZXN0T3B0aW9ucy5zaWduYWw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcXVlcmllcyA9IGJhdGNoUmVxdWVzdE9wdGlvbnMuZG9jdW1lbnRzLm1hcCgoeyBkb2N1bWVudCB9KSA9PiAoMCwgcmVzb2x2ZVJlcXVlc3REb2N1bWVudF9qc18xLnJlc29sdmVSZXF1ZXN0RG9jdW1lbnQpKGRvY3VtZW50KS5xdWVyeSk7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IGJhdGNoUmVxdWVzdE9wdGlvbnMuZG9jdW1lbnRzLm1hcCgoeyB2YXJpYWJsZXMgfSkgPT4gdmFyaWFibGVzKTtcbiAgICAgICAgcmV0dXJuIG1ha2VSZXF1ZXN0KHtcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICBxdWVyeTogcXVlcmllcyxcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETyByZWNvbmNpbGUgYmF0Y2ggdmFyaWFibGVzIGludG8gc3lzdGVtLlxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIC4uLnJlc29sdmVIZWFkZXJzKGNhbGxPcklkZW50aXR5KGhlYWRlcnMpKSxcbiAgICAgICAgICAgICAgICAuLi5yZXNvbHZlSGVhZGVycyhiYXRjaFJlcXVlc3RPcHRpb25zLnJlcXVlc3RIZWFkZXJzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5yZXF1ZXN0Q29uZmlnLmZldGNoID8/IGNyb3NzX2ZldGNoXzEuZGVmYXVsdCxcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5yZXF1ZXN0Q29uZmlnLm1ldGhvZCB8fCBgUE9TVGAsXG4gICAgICAgICAgICBmZXRjaE9wdGlvbnMsXG4gICAgICAgICAgICBtaWRkbGV3YXJlOiB0aGlzLnJlcXVlc3RDb25maWcucmVxdWVzdE1pZGRsZXdhcmUsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcXVlc3RDb25maWcucmVzcG9uc2VNaWRkbGV3YXJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Q29uZmlnLnJlc3BvbnNlTWlkZGxld2FyZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcXVlc3RDb25maWcucmVzcG9uc2VNaWRkbGV3YXJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Q29uZmlnLnJlc3BvbnNlTWlkZGxld2FyZShlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldEhlYWRlcnMoaGVhZGVycykge1xuICAgICAgICB0aGlzLnJlcXVlc3RDb25maWcuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoZWFkZXIgdG8gdGhlIGNsaWVudC4gQWxsIHN1YnNlcXVlbnQgcmVxdWVzdHMgd2lsbCBoYXZlIHRoaXMgaGVhZGVyLlxuICAgICAqL1xuICAgIHNldEhlYWRlcihrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHsgaGVhZGVycyB9ID0gdGhpcy5yZXF1ZXN0Q29uZmlnO1xuICAgICAgICBpZiAoaGVhZGVycykge1xuICAgICAgICAgICAgLy8gdG9kbyB3aGF0IGlmIGhlYWRlcnMgaXMgaW4gbmVzdGVkIGFycmF5IGZvcm0uLi4gP1xuICAgICAgICAgICAgLy9AdHMtZXhwZWN0LWVycm9yIHRvZG9cbiAgICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Q29uZmlnLmhlYWRlcnMgPSB7IFtrZXldOiB2YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIGNsaWVudCBlbmRwb2ludC4gQWxsIHN1YnNlcXVlbnQgcmVxdWVzdHMgd2lsbCBzZW5kIHRvIHRoaXMgZW5kcG9pbnQuXG4gICAgICovXG4gICAgc2V0RW5kcG9pbnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5HcmFwaFFMQ2xpZW50ID0gR3JhcGhRTENsaWVudDtcbmNvbnN0IG1ha2VSZXF1ZXN0ID0gYXN5bmMgKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnksIHZhcmlhYmxlcywgZmV0Y2hPcHRpb25zIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgZmV0Y2hlciA9IGNyZWF0ZUh0dHBNZXRob2RGZXRjaGVyKCgwLCBoZWxwZXJzX2pzXzEudXBwZXJjYXNlKShwYXJhbXMubWV0aG9kID8/IGBwb3N0YCkpO1xuICAgIGNvbnN0IGlzQmF0Y2hpbmdRdWVyeSA9IEFycmF5LmlzQXJyYXkocGFyYW1zLnF1ZXJ5KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoZXIocGFyYW1zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZXN1bHQocmVzcG9uc2UsIGZldGNoT3B0aW9ucy5qc29uU2VyaWFsaXplciA/PyBkZWZhdWx0SnNvblNlcmlhbGl6ZXJfanNfMS5kZWZhdWx0SnNvblNlcmlhbGl6ZXIpO1xuICAgIGNvbnN0IHN1Y2Nlc3NmdWxseVJlY2VpdmVkRGF0YSA9IEFycmF5LmlzQXJyYXkocmVzdWx0KVxuICAgICAgICA/ICFyZXN1bHQuc29tZSgoeyBkYXRhIH0pID0+ICFkYXRhKVxuICAgICAgICA6IEJvb2xlYW4ocmVzdWx0LmRhdGEpO1xuICAgIGNvbnN0IHN1Y2Nlc3NmdWxseVBhc3NlZEVycm9yUG9saWN5ID0gQXJyYXkuaXNBcnJheShyZXN1bHQpIHx8XG4gICAgICAgICFyZXN1bHQuZXJyb3JzIHx8XG4gICAgICAgIChBcnJheS5pc0FycmF5KHJlc3VsdC5lcnJvcnMpICYmICFyZXN1bHQuZXJyb3JzLmxlbmd0aCkgfHxcbiAgICAgICAgZmV0Y2hPcHRpb25zLmVycm9yUG9saWN5ID09PSBgYWxsYCB8fFxuICAgICAgICBmZXRjaE9wdGlvbnMuZXJyb3JQb2xpY3kgPT09IGBpZ25vcmVgO1xuICAgIGlmIChyZXNwb25zZS5vayAmJiBzdWNjZXNzZnVsbHlQYXNzZWRFcnJvclBvbGljeSAmJiBzdWNjZXNzZnVsbHlSZWNlaXZlZERhdGEpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIGZpeG1lXG4gICAgICAgIGNvbnN0IHsgZXJyb3JzOiBfLCAuLi5yZXN0IH0gPSBBcnJheS5pc0FycmF5KHJlc3VsdCkgPyByZXN1bHQgOiByZXN1bHQ7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBmZXRjaE9wdGlvbnMuZXJyb3JQb2xpY3kgPT09IGBpZ25vcmVgID8gcmVzdCA6IHJlc3VsdDtcbiAgICAgICAgY29uc3QgZGF0YUVudmVsb3BlID0gaXNCYXRjaGluZ1F1ZXJ5ID8geyBkYXRhIH0gOiBkYXRhO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE9cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmRhdGFFbnZlbG9wZSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGVycm9yUmVzdWx0ID0gdHlwZW9mIHJlc3VsdCA9PT0gYHN0cmluZ2BcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGVycm9yOiByZXN1bHQsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHJlc3VsdDtcbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzX2pzXzEuQ2xpZW50RXJyb3IoXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ET1xuICAgICAgICB7IC4uLmVycm9yUmVzdWx0LCBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cywgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyB9LCB7IHF1ZXJ5LCB2YXJpYWJsZXMgfSk7XG4gICAgfVxufTtcbi8qKlxuICogU2VuZCBhIEdyYXBoUUwgUXVlcnkgdG8gdGhlIEdyYXBoUUwgc2VydmVyIGZvciBleGVjdXRpb24uXG4gKi9cbmNvbnN0IHJhd1JlcXVlc3QgPSBhc3luYyAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IFt1cmxPck9wdGlvbnMsIHF1ZXJ5LCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVyc10gPSBhcmdzO1xuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0gKDAsIHBhcnNlQXJnc19qc18xLnBhcnNlUmF3UmVxdWVzdEV4dGVuZGVkQXJncykodXJsT3JPcHRpb25zLCBxdWVyeSwgLi4udmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnMpO1xuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBHcmFwaFFMQ2xpZW50KHJlcXVlc3RPcHRpb25zLnVybCk7XG4gICAgcmV0dXJuIGNsaWVudC5yYXdSZXF1ZXN0KHtcbiAgICAgICAgLi4ucmVxdWVzdE9wdGlvbnMsXG4gICAgfSk7XG59O1xuZXhwb3J0cy5yYXdSZXF1ZXN0ID0gcmF3UmVxdWVzdDtcbi8vIHByZXR0aWVyLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0KHVybE9yT3B0aW9ucywgZG9jdW1lbnQsIC4uLnZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzKSB7XG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSAoMCwgcGFyc2VBcmdzX2pzXzEucGFyc2VSZXF1ZXN0RXh0ZW5kZWRBcmdzKSh1cmxPck9wdGlvbnMsIGRvY3VtZW50LCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycyk7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEdyYXBoUUxDbGllbnQocmVxdWVzdE9wdGlvbnMudXJsKTtcbiAgICByZXR1cm4gY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAuLi5yZXF1ZXN0T3B0aW9ucyxcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVxdWVzdCA9IHJlcXVlc3Q7XG4vKipcbiAqIFNlbmQgYSBiYXRjaCBvZiBHcmFwaFFMIERvY3VtZW50IHRvIHRoZSBHcmFwaFFMIHNlcnZlciBmb3IgZXhlY3V0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIC8vIFlvdSBjYW4gcGFzcyBhIHJhdyBzdHJpbmdcbiAqXG4gKiBhd2FpdCBiYXRjaFJlcXVlc3RzKCdodHRwczovL2Zvby5iYXIvZ3JhcGhxbCcsIFtcbiAqIHtcbiAqICBxdWVyeTogYFxuICogICB7XG4gKiAgICAgcXVlcnkge1xuICogICAgICAgdXNlcnNcbiAqICAgICB9XG4gKiAgIH1gXG4gKiB9LFxuICoge1xuICogICBxdWVyeTogYFxuICogICB7XG4gKiAgICAgcXVlcnkge1xuICogICAgICAgdXNlcnNcbiAqICAgICB9XG4gKiAgIH1gXG4gKiB9XSlcbiAqXG4gKiAvLyBZb3UgY2FuIGFsc28gcGFzcyBhIEdyYXBoUUwgRG9jdW1lbnROb2RlIGFzIHF1ZXJ5LiBDb252ZW5pZW50IGlmIHlvdVxuICogLy8gYXJlIHVzaW5nIGdyYXBocWwtdGFnIHBhY2thZ2UuXG4gKlxuICogaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZydcbiAqXG4gKiBhd2FpdCBiYXRjaFJlcXVlc3RzKCdodHRwczovL2Zvby5iYXIvZ3JhcGhxbCcsIFt7IHF1ZXJ5OiBncWxgLi4uYCB9XSlcbiAqIGBgYFxuICovXG5jb25zdCBiYXRjaFJlcXVlc3RzID0gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBwYXJzZUJhdGNoUmVxdWVzdHNBcmdzRXh0ZW5kZWQoYXJncyk7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEdyYXBoUUxDbGllbnQocGFyYW1zLnVybCk7XG4gICAgcmV0dXJuIGNsaWVudC5iYXRjaFJlcXVlc3RzKHBhcmFtcyk7XG59O1xuZXhwb3J0cy5iYXRjaFJlcXVlc3RzID0gYmF0Y2hSZXF1ZXN0cztcbmNvbnN0IHBhcnNlQmF0Y2hSZXF1ZXN0c0FyZ3NFeHRlbmRlZCA9IChhcmdzKSA9PiB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVybDogYXJnc1swXSxcbiAgICAgICAgICAgIGRvY3VtZW50czogYXJnc1sxXSxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiBhcmdzWzJdLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxufTtcbmNvbnN0IGNyZWF0ZVJlcXVlc3RCb2R5ID0gKHF1ZXJ5LCB2YXJpYWJsZXMsIG9wZXJhdGlvbk5hbWUsIGpzb25TZXJpYWxpemVyKSA9PiB7XG4gICAgY29uc3QganNvblNlcmlhbGl6ZXJfID0ganNvblNlcmlhbGl6ZXIgPz8gZGVmYXVsdEpzb25TZXJpYWxpemVyX2pzXzEuZGVmYXVsdEpzb25TZXJpYWxpemVyO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShxdWVyeSkpIHtcbiAgICAgICAgcmV0dXJuIGpzb25TZXJpYWxpemVyXy5zdHJpbmdpZnkoeyBxdWVyeSwgdmFyaWFibGVzLCBvcGVyYXRpb25OYW1lIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhcmlhYmxlcyAhPT0gYHVuZGVmaW5lZGAgJiYgIUFycmF5LmlzQXJyYXkodmFyaWFibGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjcmVhdGUgcmVxdWVzdCBib2R5IHdpdGggZ2l2ZW4gdmFyaWFibGUgdHlwZSwgYXJyYXkgZXhwZWN0ZWRgKTtcbiAgICB9XG4gICAgLy8gQmF0Y2ggc3VwcG9ydFxuICAgIGNvbnN0IHBheWxvYWQgPSBxdWVyeS5yZWR1Y2UoKGFjYywgY3VycmVudFF1ZXJ5LCBpbmRleCkgPT4ge1xuICAgICAgICBhY2MucHVzaCh7IHF1ZXJ5OiBjdXJyZW50UXVlcnksIHZhcmlhYmxlczogdmFyaWFibGVzID8gdmFyaWFibGVzW2luZGV4XSA6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGpzb25TZXJpYWxpemVyXy5zdHJpbmdpZnkocGF5bG9hZCk7XG59O1xuY29uc3QgZ2V0UmVzdWx0ID0gYXN5bmMgKHJlc3BvbnNlLCBqc29uU2VyaWFsaXplcikgPT4ge1xuICAgIGxldCBjb250ZW50VHlwZTtcbiAgICByZXNwb25zZS5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBgY29udGVudC10eXBlYCkge1xuICAgICAgICAgICAgY29udGVudFR5cGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjb250ZW50VHlwZSAmJlxuICAgICAgICAoY29udGVudFR5cGUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGBhcHBsaWNhdGlvbi9qc29uYCkgfHxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChgYXBwbGljYXRpb24vZ3JhcGhxbCtqc29uYCkgfHxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChgYXBwbGljYXRpb24vZ3JhcGhxbC1yZXNwb25zZStqc29uYCkpKSB7XG4gICAgICAgIHJldHVybiBqc29uU2VyaWFsaXplci5wYXJzZShhd2FpdCByZXNwb25zZS50ZXh0KCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICB9XG59O1xuY29uc3QgY2FsbE9ySWRlbnRpdHkgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBgZnVuY3Rpb25gID8gdmFsdWUoKSA6IHZhbHVlO1xufTtcbi8qKlxuICogQ29udmVuaWVuY2UgcGFzc3Rocm91Z2ggdGVtcGxhdGUgdGFnIHRvIGdldCB0aGUgYmVuZWZpdHMgb2YgdG9vbGluZyBmb3IgdGhlIGdxbCB0ZW1wbGF0ZSB0YWcuIFRoaXMgZG9lcyBub3QgYWN0dWFsbHkgcGFyc2UgdGhlIGlucHV0IGludG8gYSBHcmFwaFFMIERvY3VtZW50Tm9kZSBsaWtlIGdyYXBocWwtdGFnIHBhY2thZ2UgZG9lcy4gSXQganVzdCByZXR1cm5zIHRoZSBzdHJpbmcgd2l0aCBhbnkgdmFyaWFibGVzIGdpdmVuIGludGVycG9sYXRlZC4gQ2FuIHNhdmUgeW91IGEgYml0IG9mIHBlcmZvcm1hbmNlIGFuZCBoYXZpbmcgdG8gaW5zdGFsbCBhbm90aGVyIHBhY2thZ2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgZ3FsIH0gZnJvbSAnZ3JhcGhxbC1yZXF1ZXN0J1xuICpcbiAqIGF3YWl0IHJlcXVlc3QoJ2h0dHBzOi8vZm9vLmJhci9ncmFwaHFsJywgZ3FsYC4uLmApXG4gKiBgYGBcbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFNldmVyYWwgdG9vbHMgaW4gdGhlIE5vZGUgR3JhcGhRTCBlY29zeXN0ZW0gYXJlIGhhcmRjb2RlZCB0byBzcGVjaWFsbHkgdHJlYXQgYW55IHRlbXBsYXRlIHRhZyBuYW1lZCBcImdxbFwiLiBGb3IgZXhhbXBsZSBzZWUgdGhpcyBwcmV0dGllciBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL3ByZXR0aWVyL2lzc3Vlcy80MzYwLiBVc2luZyB0aGlzIHRlbXBsYXRlIHRhZyBoYXMgbm8gcnVudGltZSBlZmZlY3QgYmV5b25kIHZhcmlhYmxlIGludGVycG9sYXRpb24uXG4gKi9cbmNvbnN0IGdxbCA9IChjaHVua3MsIC4uLnZhcmlhYmxlcykgPT4ge1xuICAgIHJldHVybiBjaHVua3MucmVkdWNlKChhY2MsIGNodW5rLCBpbmRleCkgPT4gYCR7YWNjfSR7Y2h1bmt9JHtpbmRleCBpbiB2YXJpYWJsZXMgPyBTdHJpbmcodmFyaWFibGVzW2luZGV4XSkgOiBgYH1gLCBgYCk7XG59O1xuZXhwb3J0cy5ncWwgPSBncWw7XG52YXIgZ3JhcGhxbF93c19qc18xID0gcmVxdWlyZShcIi4vZ3JhcGhxbC13cy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdyYXBoUUxXZWJTb2NrZXRDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyYXBocWxfd3NfanNfMS5HcmFwaFFMV2ViU29ja2V0Q2xpZW50OyB9IH0pO1xudmFyIHJlc29sdmVSZXF1ZXN0RG9jdW1lbnRfanNfMiA9IHJlcXVpcmUoXCIuL3Jlc29sdmVSZXF1ZXN0RG9jdW1lbnQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXNvbHZlUmVxdWVzdERvY3VtZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlUmVxdWVzdERvY3VtZW50X2pzXzIucmVzb2x2ZVJlcXVlc3REb2N1bWVudDsgfSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlcXVlc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/parseArgs.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/parseArgs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;\nconst parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {\n    return documentOrOptions.document\n        ? documentOrOptions\n        : {\n            document: documentOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRequestArgs = parseRequestArgs;\nconst parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {\n    return queryOrOptions.query\n        ? queryOrOptions\n        : {\n            query: queryOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRawRequestArgs = parseRawRequestArgs;\nconst parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {\n    return documentsOrOptions.documents\n        ? documentsOrOptions\n        : {\n            documents: documentsOrOptions,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseBatchRequestArgs = parseBatchRequestArgs;\nconst parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.document\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            document: document,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRequestExtendedArgs = parseRequestExtendedArgs;\nconst parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.query\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            query: query,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;\n//# sourceMappingURL=parseArgs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLEdBQUcsZ0NBQWdDLEdBQUcsNkJBQTZCLEdBQUcsMkJBQTJCLEdBQUcsd0JBQXdCO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZGllLWNhcnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanM/OWU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gZXhwb3J0cy5wYXJzZVJlcXVlc3RFeHRlbmRlZEFyZ3MgPSBleHBvcnRzLnBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IGV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0QXJncyA9IGV4cG9ydHMucGFyc2VSZXF1ZXN0QXJncyA9IHZvaWQgMDtcbmNvbnN0IHBhcnNlUmVxdWVzdEFyZ3MgPSAoZG9jdW1lbnRPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnRPck9wdGlvbnMuZG9jdW1lbnRcbiAgICAgICAgPyBkb2N1bWVudE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJlcXVlc3RBcmdzID0gcGFyc2VSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlUmF3UmVxdWVzdEFyZ3MgPSAocXVlcnlPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gcXVlcnlPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyBxdWVyeU9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeU9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJhd1JlcXVlc3RBcmdzID0gcGFyc2VSYXdSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IChkb2N1bWVudHNPck9wdGlvbnMsIHJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50c09yT3B0aW9ucy5kb2N1bWVudHNcbiAgICAgICAgPyBkb2N1bWVudHNPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBkb2N1bWVudHM6IGRvY3VtZW50c09yT3B0aW9ucyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydHMucGFyc2VCYXRjaFJlcXVlc3RBcmdzID0gcGFyc2VCYXRjaFJlcXVlc3RBcmdzO1xuY29uc3QgcGFyc2VSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gKHVybE9yT3B0aW9ucywgZG9jdW1lbnQsIC4uLnZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgY29uc3QgW3ZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnNdID0gdmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnM7XG4gICAgcmV0dXJuIHVybE9yT3B0aW9ucy5kb2N1bWVudFxuICAgICAgICA/IHVybE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHVybDogdXJsT3JPcHRpb25zLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgICBzaWduYWw6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbn07XG5leHBvcnRzLnBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncyA9IHBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncztcbmNvbnN0IHBhcnNlUmF3UmVxdWVzdEV4dGVuZGVkQXJncyA9ICh1cmxPck9wdGlvbnMsIHF1ZXJ5LCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycykgPT4ge1xuICAgIGNvbnN0IFt2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzXSA9IHZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzO1xuICAgIHJldHVybiB1cmxPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyB1cmxPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICB1cmw6IHVybE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3MgPSBwYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUFyZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/parseArgs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/resolveRequestDocument.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveRequestDocument = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\n/**\n * helpers\n */\nconst extractOperationName = (document) => {\n    let operationName = undefined;\n    const operationDefinitions = document.definitions.filter((definition) => definition.kind === `OperationDefinition`);\n    if (operationDefinitions.length === 1) {\n        operationName = operationDefinitions[0]?.name?.value;\n    }\n    return operationName;\n};\nconst resolveRequestDocument = (document) => {\n    if (typeof document === `string`) {\n        let operationName = undefined;\n        try {\n            const parsedDocument = (0, graphql_1.parse)(document);\n            operationName = extractOperationName(parsedDocument);\n        }\n        catch (err) {\n            // Failed parsing the document, the operationName will be undefined\n        }\n        return { query: document, operationName };\n    }\n    const operationName = extractOperationName(document);\n    return { query: (0, graphql_1.print)(document), operationName };\n};\nexports.resolveRequestDocument = resolveRequestDocument;\n//# sourceMappingURL=resolveRequestDocument.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZS1jYXJ0Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvcmVzb2x2ZVJlcXVlc3REb2N1bWVudC5qcz8yN2JjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlUmVxdWVzdERvY3VtZW50ID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG4vKipcbiAqIGhlbHBlcnNcbiAqL1xuY29uc3QgZXh0cmFjdE9wZXJhdGlvbk5hbWUgPSAoZG9jdW1lbnQpID0+IHtcbiAgICBsZXQgb3BlcmF0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBvcGVyYXRpb25EZWZpbml0aW9ucyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcigoZGVmaW5pdGlvbikgPT4gZGVmaW5pdGlvbi5raW5kID09PSBgT3BlcmF0aW9uRGVmaW5pdGlvbmApO1xuICAgIGlmIChvcGVyYXRpb25EZWZpbml0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgb3BlcmF0aW9uTmFtZSA9IG9wZXJhdGlvbkRlZmluaXRpb25zWzBdPy5uYW1lPy52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbk5hbWU7XG59O1xuY29uc3QgcmVzb2x2ZVJlcXVlc3REb2N1bWVudCA9IChkb2N1bWVudCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IGBzdHJpbmdgKSB7XG4gICAgICAgIGxldCBvcGVyYXRpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRG9jdW1lbnQgPSAoMCwgZ3JhcGhxbF8xLnBhcnNlKShkb2N1bWVudCk7XG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lID0gZXh0cmFjdE9wZXJhdGlvbk5hbWUocGFyc2VkRG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIEZhaWxlZCBwYXJzaW5nIHRoZSBkb2N1bWVudCwgdGhlIG9wZXJhdGlvbk5hbWUgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBxdWVyeTogZG9jdW1lbnQsIG9wZXJhdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IGV4dHJhY3RPcGVyYXRpb25OYW1lKGRvY3VtZW50KTtcbiAgICByZXR1cm4geyBxdWVyeTogKDAsIGdyYXBocWxfMS5wcmludCkoZG9jdW1lbnQpLCBvcGVyYXRpb25OYW1lIH07XG59O1xuZXhwb3J0cy5yZXNvbHZlUmVxdWVzdERvY3VtZW50ID0gcmVzb2x2ZVJlcXVlc3REb2N1bWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVSZXF1ZXN0RG9jdW1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/cjs/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientError = void 0;\nclass ClientError extends Error {\n    constructor(response, request) {\n        const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n            response,\n            request,\n        })}`;\n        super(message);\n        Object.setPrototypeOf(this, ClientError.prototype);\n        this.response = response;\n        this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === `function`) {\n            Error.captureStackTrace(this, ClientError);\n        }\n    }\n    static extractMessage(response) {\n        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;\n    }\n}\nexports.ClientError = ClientError;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLDJCQUEyQixxQ0FBcUMsSUFBSTtBQUNwRTtBQUNBO0FBQ0EsU0FBUyxFQUFFO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsZ0JBQWdCO0FBQ3hGO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kaWUtY2FydC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL3R5cGVzLmpzPzEyNWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudEVycm9yID0gdm9pZCAwO1xuY2xhc3MgQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2UsIHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke0NsaWVudEVycm9yLmV4dHJhY3RNZXNzYWdlKHJlc3BvbnNlKX06ICR7SlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICB9KX1gO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsaWVudEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgLy8gdGhpcyBpcyBuZWVkZWQgYXMgU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCAuY2FwdHVyZVN0YWNrVHJhY2VcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gYGZ1bmN0aW9uYCkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ2xpZW50RXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBleHRyYWN0TWVzc2FnZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZXJyb3JzPy5bMF0/Lm1lc3NhZ2UgPz8gYEdyYXBoUUwgRXJyb3IgKENvZGU6ICR7cmVzcG9uc2Uuc3RhdHVzfSlgO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50RXJyb3IgPSBDbGllbnRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/cjs/types.js\n");

/***/ })

};
;